#if !defined(AFX_AGENTPANELOCX_H__30889429_28B5_4B09_94D8_42BB7A0E6350__INCLUDED_)
#define AFX_AGENTPANELOCX_H__30889429_28B5_4B09_94D8_42BB7A0E6350__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CAgentPanelOcx wrapper class

class CAgentPanelOcx : public CWnd
{
protected:
	DECLARE_DYNCREATE(CAgentPanelOcx)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xea5bbe, 0xd690, 0x489f, { 0x98, 0xc5, 0xcf, 0xee, 0xce, 0x85, 0xd9, 0x30 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	void ActionLogon(LPCTSTR sAccount, LPCTSTR sPassword, short iLoginServerOpt, LPCTSTR sLoginServerHost);
	void ActionLogon2(LPCTSTR sCorp, LPCTSTR sAccount, LPCTSTR sPassword, short iLoginServerOpt, LPCTSTR sLoginServerHost);
	void ActionReset();
	void ActionLogout();
	void ActionLogonAgain();
	void ActionCallDepartment(LPCTSTR sCallTarget);
	void ActionCallAgent(LPCTSTR sCallTarget);
	void ActionCallOtherAgent(LPCTSTR sCallTarget);
	void ActionCallPstn(LPCTSTR sCallTarget);
	void ActionCallExtNum(LPCTSTR sCallTarget);
	void ActionCallOtherDepartment(LPCTSTR sCallTarget);
	void ActionOnHook();
	void ActionOffHook();
	void ActionPark();
	void ActionUnPark();
	void ActionProcess();
	void ActionUnProcess();
	void ActionHold();
	void ActionUnHold();
	void ActionTransfer();
	void ActionAutoTransfer();
	void ActionStartMonit(LPCTSTR sAgentID, LPCTSTR sIP, LPCTSTR sPort);
	void ActionStopMonit();
	void ActionForceDisconnect(LPCTSTR sAgentID);
	void ActionGetFullFreeAgentInfo();
	void ActionGetGroupInfo();
	void ActionGetOneGroupFreeAgentInfo(LPCTSTR sGroupName);
	void ActionGetTalkingAgent();
	void ActionSendDTMF(short iDTMFCode);
	void ActionChangePassword(LPCTSTR sAccount, LPCTSTR sOldPassword, LPCTSTR sNewPassword);
	void ActionChangeEarphoneVolume(short iNewVolume);
	void ActionChangeMicVolume(short iNewVolume);
	void ActionSendSMS(LPCTSTR sTargetNum, LPCTSTR sSMSContent);
	void ActionSendChat(LPCTSTR sChatContent);
	void ConfigPortSettings(BOOL bCustomizePort, long lAgentPort, long lAudioPort1, long lAudioPort2, BOOL bRequireTCPTransfer, BOOL bIsLanUser);
	void ConfigRecSettings(BOOL bLocalRecord);
	void ConfigOutDialSettings(BOOL bAutoOffhook, BOOL bOutDialMobileAddZero, LPCTSTR sAreaNum, LPCTSTR sOneKeyNum);
	void ConfigSoundSettings(BOOL bMicAutoCtrl, BOOL bEchoRemove, BOOL bMicBostUp, BOOL bUsePCSpeaker);
	// add by lh.wang date:2012.11.08 µÚÈý·½
	void ActionStartConference();
	void ActionEndConference();
	BOOL  GetCanConference();
	// end add
	short GetLoginManner();
	CString GetDeptment();
	CString GetCorp();
	short GetCallType();
	CString GetCallFrom();
	CString GetPrivateData();
	CString GetRecInvokeID();
	short GetClientState();
	short GetLogonType();
	short GetCallPartyType();
	BOOL GetAgentHasLogon();
	BOOL Initialize(short iVersionType, LPCTSTR sVersionNum);
	void Exit();
	short GetRoleInCompany();
	CString GetAgentAccount();
	BOOL GetIsCCNUser();
	short GetAgentType();
	BOOL GetIsSMSEnabled();
	CString GetAgentExtNum();
	CString GetAgentPhoneNo();
	CString GetManagerID();
	BOOL GetIsSuperAgent();
	BOOL GetIsMasterSuperAgent();
	void ActionSendStrMsg(LPCTSTR cTargets, LPCTSTR cContent);
	CString GetRemindTime();
	void ActionSettings();
	void ActionMonit();
	void ActionAgentOutDial(LPCTSTR sCallTarget, short iCallType);
	BOOL GetIsMonit();
	CString GetSMSParamsInfo();
	CString GetAllSettings();
	CString GetBriefStatisticInfo(LPCTSTR sDayTime);
	void ActionSaveBriefStatisticInfo();
	void ActionSetMuteMode(BOOL bSetMute);
	void ActionTransferToIVR(LPCTSTR sPrivateData, BOOL bUseDefaultTypes, LPCTSTR sLanguageType, LPCTSTR sOperationType, short iWorkingMode);
	CString GetTransferToIVRParamsInfo();
	BOOL GetIsCallFromACD();
	void ActionUpdateSettings();
	BOOL GetIsOutDialOpenURL();
	short GetIVRReturn();
	void SetProductVersion(short iVersionType, LPCTSTR sVersionNum);
	CString GetRecInvokePath();
	CString GetAgentID();
	void SetOriginalData(LPCTSTR sOriginalData);
	void ActionOutDial(LPCTSTR sCallTarget);
	void SetSelectGroup(LPCTSTR sGroup);
	void ActionAutoTransferEx(LPCTSTR sCallTarget);
	void ActionOutDialWithRecSetting(LPCTSTR strTarget, LPCTSTR strRecPath);
	void ActionOffHookWithRecSetting(LPCTSTR sRecPath);
	BOOL GetIsCallInOpenURL();
	CString GetParkReasons();
	void SetParkReason(short iParkReasonID);
	void SetCallerSendingInDialing(LPCTSTR sCaller);
	void ActionJoinOutDialMode(BOOL bJoinOutDialMode);
	BOOL GetIsOutDialMode();
	CString GetMoudleFilePath();
	void ActionSetMuteModeEx(long nDev, long nVolume, BOOL bSet);
	void StopPlayAgentID();
    void ActionACDAutoLogin();
	void SetLogonMode(short nLoginMode);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_AGENTPANELOCX_H__30889429_28B5_4B09_94D8_42BB7A0E6350__INCLUDED_)
